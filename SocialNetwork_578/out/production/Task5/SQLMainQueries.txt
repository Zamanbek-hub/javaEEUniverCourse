CREATE TABLE users (
                       id serial PRIMARY KEY,
                       email varchar(255) NOT NULL  UNIQUE CHECK(length(email)>0),
                       password varchar(255) NOT NULL CHECK(length(password)>0),
                       full_name varchar(255) NOT NULL,
                       birth_date timestamp NOT NULL DEFAULT NOW(),
                       picture_url varchar(500) NOT NULL  UNIQUE CHECK(length(picture_url)>0)

);


CREATE TABLE posts (
                       id serial PRIMARY KEY,
                       title text NOT NULL CHECK(length(title)>0),
                       short_content text,
                       content text,
                       post_date timestamp NOT NULL DEFAULT NOW(),
                       author_id int REFERENCES users(id)
);


CREATE TABLE chats
(
    id                  serial PRIMARY KEY,
    user_id             int REFERENCES users (id),
    opponent_user_id    int REFERENCES users (id),
    create_date         timestamp NOT NULL DEFAULT NOW(),
    latest_message_text text,
    latest_meesage_time timestamp NOT NULL DEFAULT NOW()

);


SELECT CASE WHEN fr.id is null THEN -1 ELSE fr.id END as friend_id,
       u.id as sender_id, u.email, u.full_name, u.birth_date, u.picture_url
FROM  users u  LEFT JOIN friends_requests fr on u.id = fr.user_id
WHERE (full_name ~* 'b' or fr.request_sender_id = 5) and u.id != 5
ORDER BY full_name ASC;

SELECT u.id, u.email, u.full_name, u.birth_date, u.picture_url
                    FROM users u INNER JOIN friends_requests fr on u.id = fr.request_sender_id
                WHERE fr.user_id = 5;

select * from friends_requests;
select * from friends;
DELETE FROM friends_requests where user_id = 171 and request_sender_id = 5;
select * from users;

INSERT INTO friends_requests(user_id, request_sender_id) values(5, 177), (5, 178), (5, 179), (5, 180), (5, 181);

INSERT INTO friends(user_id, friend_id) values(?, ?);


INSERT INTO friends(user_id, friend_id) values
                                               (DELETE FROM friends_requests
                                                   where user_id = ? and request_sender_id = ?
                                                   RETURNING request_sender_id, user_id)
                                                   ON CONFLICT DO NOTHING ;

DELETE FROM friends_requests
where user_id = ? and request_sender_id = ?
RETURNING request_sender_id, user_id;

SELECT u.id, u.email, u.full_name, u.birth_date, u.picture_url
                    FROM users u INNER JOIN friends fr on u.id = fr.friend_id
                WHERE fr.user_id = 5;



SELECT
    CASE WHEN f2.id is null THEN -1 ELSE f2.id END as friend_id,
    CASE WHEN fr.id is null THEN -1 ELSE fr.id END as friend_request_id,
    CASE
       WHEN us.id = fr.request_sender_id  THEN 'get'
       WHEN us.id = fr.user_id THEN 'sent'
       WHEN us.id in (SELECT
                          CASE WHEN f.friend_id is null THEN -1 ELSE f.friend_id END as friend_id

                      FROM users us  INNER JOIN friends f on us.id = f.friend_id or us.id = f.user_id

                      WHERE (us.full_name ~* ? or f.friend_id = ? or f.user_id = ?) and us.id != ?
                      ORDER BY full_name ASC) THEN 'friend'
       ELSE 'add'
    END as type,
    us.id as sender_id, us.email, us.full_name, us.birth_date, us.picture_url
    FROM users u  LEFT JOIN friends_requests fr on u.id = fr.user_id or u.id = fr.request_sender_id
          LEFT JOIN users us on us.id = u.id
            LEFT JOIN friends f2 on us.id = f2.friend_id

WHERE (u.full_name ~* ? or fr.request_sender_id = ? or fr.user_id = ?) and u.id != ?
                ORDER BY full_name ASC;



SELECT DISTINCT
    CASE
        WHEN fr.user_id is null THEN -1
        WHEN u.id = fr.request_sender_id  THEN fr.user_id
        WHEN u.id = fr.user_id THEN fr.request_sender_id
        ELSE -1 END  as friend_request_id,
    CASE
       WHEN u.id = fr.request_sender_id  THEN 'get'
       WHEN u.id = fr.user_id THEN 'sent'
       ELSE 'add'
    END as type,
    u.id as sender_id, u.email, u.full_name, u.birth_date, u.picture_url
    FROM users u
        INNER JOIN friends_requests fr on u.id = fr.request_sender_id or u.id = fr.user_id
                  LEFT JOIN friends_requests fr2 on u.id = fr2.user_id

WHERE  u.full_name ~* 'b' and (fr.user_id = 5 or fr.request_sender_id = 5) and u.id != 5
                ORDER BY full_name ASC;


